name: build

on: push

jobs:
  build-webui:
    name: Build WebUI
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install shared deps
        run: yarn install

      - name: Install webui deps
        working-directory: ./webui
        run: yarn install

      - name: Build webui
        working-directory: ./webui
        run: yarn build

      - uses: actions/upload-artifact@v4
        with:
          name: webui-dist
          path: ./webui/dist

  build-executable:
    name: Build executable
    needs: build-webui
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Download Webui dist
        uses: actions/download-artifact@v4
        with:
          name: webui-dist
          path: webui/dist

      - name: Install requirements
        if: "runner.os == 'Linux'"
        run: sudo apt-get -y install libarchive-tools

      - name: Update version global
        run: sh scripts/update_build_version.sh

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        env:
          USE_HARD_LINKS: false # because of https://github.com/electron-userland/electron-builder/issues/3179
        with:
          github_token: ${{ secrets.github_token }}
          release: false

      - name: Clean build directory
        shell: bash
        run: ./scripts/clean_build.sh

      # - name: Upload Artifacts
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: soundsync-${{ runner.os }}
      #     path: bin

      - uses: ./.github/actions/create-dev-release
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          prerelease: false
          files_glob: bin/*
          asset_content_type: application/zip

      - uses: ./.github/actions/create-dev-release
        if: ${{ github.ref == 'refs/heads/master' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: bleeding-edge
          release_name: Bleeding edge
          prerelease: true
          files_glob: bin/*
          asset_content_type: application/zip


  # crosscompile:
  #   name: Build executable for ARM
  #   needs: build-webui
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Check out Git repository
  #     uses: actions/checkout@v1

  #   - name: Download Webui dist
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: webui-dist
  #       path: webui/dist

  #   - name: Update version global
  #     run: sh scripts/update_build_version.sh

  #   - name: Build for raspberrypi
  #     shell: bash
  #     run: ./scripts/compile_for_raspberrypi.sh

  #   - name: Clean build directory
  #     shell: bash
  #     run: sudo ./scripts/clean_build.sh

  #   # - name: Upload build artifacts
  #   #   uses: actions/upload-artifact@v1
  #   #   with:
  #   #     name: soundsync-linux-armv7l
  #   #     path: bin/

  #   - uses: ./.github/actions/create-dev-release
  #     if: ${{ startsWith(github.ref, 'refs/tags/v') }}
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ github.ref }}
  #       release_name: ${{ github.ref }}
  #       prerelease: false
  #       files_glob: bin/*
  #       asset_content_type: application/zip

  #   - uses: ./.github/actions/create-dev-release
  #     if: ${{ github.ref == 'refs/heads/master' }}
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: bleeding-edge
  #       release_name: Bleeding edge
  #       prerelease: true
  #       files_glob: bin/*
  #       asset_content_type: application/zip
